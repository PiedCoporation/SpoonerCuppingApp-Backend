name: Deploy Server

on:
  push:
    branches:
      - main

env:
  # HTTP
  HTTP_URL: ${{ secrets.HTTP_URL }}
  HTTP_PORT: ${{ secrets.HTTP_PORT }}
  HTTP_READ_TIMEOUT: ${{ secrets.HTTP_READ_TIMEOUT }}
  HTTP_WRITE_TIMEOUT: ${{ secrets.HTTP_WRITE_TIMEOUT }}
  HTTP_IDLE_TIMEOUT: ${{ secrets.HTTP_IDLE_TIMEOUT }}
  HTTP_SHUTDOWN_TIMEOUT: ${{ secrets.HTTP_SHUTDOWN_TIMEOUT }}

  # Postgres
  POSTGRES_DB_URL: ${{ secrets.POSTGRES_DB_URL }}
  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  POSTGRES_USERNAME: ${{ secrets.POSTGRES_USERNAME }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DBNAME: ${{ secrets.POSTGRES_DBNAME }}
  POSTGRES_MAX_IDLE_CONNS: ${{ secrets.POSTGRES_MAX_IDLE_CONNS }}
  POSTGRES_MAX_OPEN_CONNS: ${{ secrets.POSTGRES_MAX_OPEN_CONNS }}
  POSTGRES_CONN_MAX_LIFETIME: ${{ secrets.POSTGRES_CONN_MAX_LIFETIME }}

  # Logger
  LOGGER_LOG_LEVEL: ${{ secrets.LOGGER_LOG_LEVEL }}
  LOGGER_FILE_LOG_NAME: ${{ secrets.LOGGER_FILE_LOG_NAME }}
  LOGGER_MAX_BACKUPS: ${{ secrets.LOGGER_MAX_BACKUPS }}
  LOGGER_MAX_AGE: ${{ secrets.LOGGER_MAX_AGE }}
  LOGGER_MAX_SIZE: ${{ secrets.LOGGER_MAX_SIZE }}
  LOGGER_COMPRESS: ${{ secrets.LOGGER_COMPRESS }}

  # JWT
  JWT_ACCESS_TOKEN_KEY: ${{ secrets.JWT_ACCESS_TOKEN_KEY }}
  JWT_ACCESS_TOKEN_EXPIRES_IN: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRES_IN }}
  JWT_REFRESH_TOKEN_KEY: ${{ secrets.JWT_REFRESH_TOKEN_KEY }}
  JWT_REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.JWT_REFRESH_TOKEN_EXPIRES_IN }}
  JWT_REGISTER_TOKEN_KEY: ${{ secrets.JWT_REGISTER_TOKEN_KEY }}
  JWT_REGISTER_TOKEN_EXPIRES_IN: ${{ secrets.JWT_REGISTER_TOKEN_EXPIRES_IN }}
  JWT_LOGIN_TOKEN_KEY: ${{ secrets.JWT_LOGIN_TOKEN_KEY }}
  JWT_LOGIN_TOKEN_EXPIRES_IN: ${{ secrets.JWT_LOGIN_TOKEN_EXPIRES_IN }}

  # SMTP
  SMTP_HOST: ${{ secrets.SMTP_HOST }}
  SMTP_PORT: ${{ secrets.SMTP_PORT }}
  SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
  SMTP_APP_PASSWORD: ${{ secrets.SMTP_APP_PASSWORD }}

jobs:
  build:
    runs-on: [self-hosted]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Docker Images
        working-directory: .
        run: |
          echo "Building Docker images..."
          docker compose build
          echo "Build completed successfully!"

  deploy:
    needs: build
    runs-on: [self-hosted]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Stop Coffee Cupping API
        working-directory: .
        run: |
          echo "Stopping existing API container..."
          docker compose -f docker-compose.yml -p coffee-cupping-project stop coffee-cupping-api || echo "Container not running"
          docker compose -f docker-compose.yml -p coffee-cupping-project rm -f coffee-cupping-api || echo "Container not found"
          echo "Cleanup completed"

      - name: Prune Unused Docker Images
        run: |
          echo "Pruning unused Docker images..."
          docker image prune -f
          echo "Image cleanup completed"

      - name: Deploy API
        working-directory: .
        run: |
          echo "Deploying API..."
          docker compose -f docker-compose.yml -p coffee-cupping-project up -d coffee-cupping-api --build
          echo "API deployment initiated"

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to be ready..."
          sleep 10
          echo "Health check delay completed"

      - name: Health Check
        run: |
          echo "Performing health check..."
          # Check if container is running
          if docker ps --filter "name=coffee-cupping-api" --filter "status=running" | grep -q coffee-cupping-api; then
            echo "‚úÖ API container is running"
          else
            echo "‚ùå API container is not running"
            docker ps -a --filter "name=coffee-cupping-api"
            exit 1
          fi

          # Check container logs for any obvious errors
          echo "Checking container logs..."
          docker logs coffee-cupping-api --tail 20

      - name: Notify Deployment Success
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "API is running and healthy"
