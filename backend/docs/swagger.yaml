basePath: /v1
consumes:
- application/json
definitions:
  controller.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controller.MessageResponse:
    properties:
      message:
        type: string
    type: object
  controller.TokenData:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  controller.TokenResponse:
    properties:
      data:
        $ref: '#/definitions/controller.TokenData'
      message:
        type: string
    type: object
  event.CreateEventReq:
    properties:
      dateOfEvent:
        type: string
      emailContact:
        type: string
      endTime:
        type: string
      eventAddress:
        items:
          $ref: '#/definitions/event.NewEventAddressReq'
        type: array
      isPublic:
        type: boolean
      limit:
        type: integer
      name:
        type: string
      numberSamples:
        type: integer
      phoneContact:
        type: string
      registerDate:
        type: string
      samples:
        items:
          $ref: '#/definitions/event.NewSampleReq'
        type: array
      startTime:
        type: string
    type: object
  event.Event:
    properties:
      date_of_event:
        example: "2024-01-15T10:00:00Z"
        type: string
      email_contact:
        example: contact@example.com
        type: string
      end_time:
        example: "2024-01-15T18:00:00Z"
        type: string
      event_address:
        items:
          $ref: '#/definitions/event.EventAddress'
        type: array
      host_by:
        $ref: '#/definitions/event.HostBy'
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      is_public:
        example: true
        type: boolean
      limit:
        example: 50
        type: integer
      name:
        example: Coffee Cupping Event
        type: string
      number_samples:
        example: 5
        type: integer
      phone_contact:
        example: "+1234567890"
        type: string
      register_date:
        example: "2024-01-10T00:00:00Z"
        type: string
      register_status:
        allOf:
        - $ref: '#/definitions/eventregisterstatus.RegisterStatusEnum'
        enum:
        - PENDING
        - ACCEPTED
        - FULL
        example: PENDING
      start_time:
        example: "2024-01-15T10:00:00Z"
        type: string
      total_current:
        example: 20
        type: integer
    type: object
  event.EventAddress:
    properties:
      district:
        example: District 1
        type: string
      latitude:
        example: "10.8231"
        type: string
      longitude:
        example: "106.6297"
        type: string
      phone:
        example: "+1234567890"
        type: string
      province:
        example: Ho Chi Minh
        type: string
      street:
        example: 123 Main Street
        type: string
      ward:
        example: Ben Nghe Ward
        type: string
    type: object
  event.EventPageResult:
    properties:
      data:
        items:
          $ref: '#/definitions/event.Event'
        type: array
      page:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      total:
        example: 150
        type: integer
      total_pages:
        example: 15
        type: integer
    type: object
  event.EventSample:
    properties:
      altitude_grow:
        example: 1000m
        type: string
      breed_name:
        example: Breed Name
        type: string
      grow_address:
        example: Grow Address
        type: string
      grow_nation:
        example: Vietnam
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      name:
        example: Coffee Sample
        type: string
      pre_processing:
        allOf:
        - $ref: '#/definitions/processing.ProcessingEnum'
        example: Washed
      price:
        example: "100000"
        type: string
      rating:
        example: 5
        type: integer
      roast_level:
        allOf:
        - $ref: '#/definitions/roastinglever.RoastingLeverEnum'
        example: Medium
      roastery_address:
        example: Roastery Address
        type: string
      roastery_name:
        example: Roastery Name
        type: string
      roasting_date:
        example: "2024-01-15T10:00:00Z"
        type: string
    type: object
  event.GetEventByIDResponse:
    properties:
      event:
        $ref: '#/definitions/event.Event'
      samples:
        items:
          $ref: '#/definitions/event.EventSample'
        type: array
    type: object
  event.HostBy:
    properties:
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      last_name:
        example: Doe
        type: string
      phone:
        example: "+1234567890"
        type: string
    type: object
  event.NewEventAddressReq:
    properties:
      district:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      phone:
        type: string
      province:
        type: string
      street:
        type: string
      ward:
        type: string
    type: object
  event.NewSampleReq:
    properties:
      altitudeGrow:
        type: string
      breedName:
        type: string
      growAddress:
        type: string
      growNation:
        type: string
      name:
        type: string
      preProcessing:
        $ref: '#/definitions/processing.ProcessingEnum'
      price:
        format: float64
        type: number
      roastLevel:
        $ref: '#/definitions/roastinglever.RoastingLeverEnum'
      roasteryAddress:
        type: string
      roasteryName:
        type: string
      roastingDate:
        type: string
    type: object
  eventregisterstatus.RegisterStatusEnum:
    description: Registration status of an event
    enum:
    - PENDING
    - ACCEPTED
    - FULL
    type: string
    x-enum-varnames:
    - RegisterStatusEnumPending
    - RegisterStatusEnumAccepted
    - RegisterStatusEnumFull
  post.CommentViewRes:
    properties:
      content:
        example: Lorem ipsum dolor sit
        type: string
      created_at:
        example: "2024-01-15T10:00:00Z"
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      parent_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      updated_at:
        example: "2024-01-15T10:00:00Z"
        type: string
      user:
        $ref: '#/definitions/user.UserViewRes'
    type: object
  post.CreatePostReq:
    properties:
      content:
        type: string
      event_id:
        type: string
      image_urls:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - content
    - title
    type: object
  post.GetPostByIdResponse:
    properties:
      comment_count:
        example: 4
        type: integer
      content:
        example: Lorem ipsum dolor sit
        type: string
      created_at:
        example: "2024-01-15T10:00:00Z"
        type: string
      event_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      images:
        example:
        - '["https://example.com/img1.jpg"]'
        items:
          type: string
        type: array
      like_count:
        example: 15
        type: integer
      parent_comments:
        items:
          $ref: '#/definitions/post.CommentViewRes'
        type: array
      title:
        example: My title
        type: string
      updated_at:
        example: "2024-01-15T10:00:00Z"
        type: string
      user:
        $ref: '#/definitions/user.UserViewRes'
    type: object
  post.PostPageResult:
    properties:
      data:
        items:
          $ref: '#/definitions/post.PostViewRes'
        type: array
      page:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      total:
        example: 150
        type: integer
      total_pages:
        example: 15
        type: integer
    type: object
  post.PostViewRes:
    properties:
      comment_count:
        example: 4
        type: integer
      content:
        example: Lorem ipsum dolor sit
        type: string
      created_at:
        example: "2024-01-15T10:00:00Z"
        type: string
      event_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      images:
        example:
        - '["https://example.com/img1.jpg"]'
        items:
          type: string
        type: array
      like_count:
        example: 15
        type: integer
      title:
        example: My title
        type: string
      updated_at:
        example: "2024-01-15T10:00:00Z"
        type: string
      user:
        $ref: '#/definitions/user.UserViewRes'
    type: object
  post.UpdatePostReq:
    properties:
      content:
        type: string
      event_id:
        type: string
      image_urls:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  processing.ProcessingEnum:
    enum:
    - NATURAL
    - HONEY
    - SEMI
    - WASHED
    - ANAEROBIC
    type: string
    x-enum-varnames:
    - Natural
    - Honey
    - Semi
    - Washed
    - Anaerobic
  roastinglever.RoastingLeverEnum:
    enum:
    - EXTRA_LIGHT
    - LIGHT
    - MEDIUM
    - MEDIUM_DARK
    - DARK
    type: string
    x-enum-varnames:
    - ExtraLight
    - Light
    - Medium
    - MediumDark
    - Dark
  user.ChangePasswordReq:
    properties:
      confirm_password:
        type: string
      password:
        maxLength: 30
        minLength: 8
        type: string
    required:
    - confirm_password
    - password
    type: object
  user.ForgotPasswordReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  user.LoginUserReq:
    properties:
      email:
        type: string
      password:
        maxLength: 30
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  user.LogoutUserReq:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  user.RefreshTokenReq:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  user.RegisterUserReq:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        maxLength: 30
        minLength: 8
        type: string
      phone:
        type: string
    required:
    - confirm_password
    - email
    - first_name
    - last_name
    - password
    - phone
    type: object
  user.ResendEmailReq:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  user.UserViewRes:
    properties:
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      last_name:
        example: Doe
        type: string
      phone:
        example: "+1234567890"
        type: string
    type: object
info:
  contact: {}
  description: API documentation for Coffee Cupping backend.
  title: Coffee Cupping API
  version: "1.0"
paths:
  /events:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of events with optional search functionality
      parameters:
      - default: 10
        description: 'Number of events per page (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      - default: 1
        description: 'Page number (default: 1)'
        in: query
        minimum: 1
        name: page_number
        type: integer
      - description: Search term to filter events by name
        in: query
        name: search_term
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of events
          schema:
            $ref: '#/definitions/event.EventPageResult'
        "400":
          description: Bad request - invalid parameters
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get paginated events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create a new cupping event
      parameters:
      - description: Event payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/event.CreateEventReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create an event
      tags:
      - events
  /events/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific event by its ID
      parameters:
      - description: Event ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event details with samples
          schema:
            $ref: '#/definitions/event.GetEventByIDResponse'
        "400":
          description: Bad request - invalid event ID
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Event not found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get event by ID
      tags:
      - events
  /events/{id}/register:
    post:
      consumes:
      - application/json
      description: Register the current user for a specific event
      parameters:
      - description: Event ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Registration successful
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad request - invalid event ID or already registered
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Event not found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Register for an event
      tags:
      - events
  /posts:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of posts with optional search functionality
      parameters:
      - default: 10
        description: 'Number of posts per page (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      - default: 1
        description: 'Page number (default: 1)'
        in: query
        minimum: 1
        name: page_number
        type: integer
      - description: Search term to filter posts by title
        in: query
        name: search_term
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of posts
          schema:
            $ref: '#/definitions/post.PostPageResult'
        "400":
          description: Bad request - invalid parameters
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get paginated posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new post with optional images
      parameters:
      - description: Post payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/post.CreatePostReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete post by id
      parameters:
      - description: Post ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an existing post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Retrieve a specific post by its ID
      parameters:
      - description: Post ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post details
          schema:
            $ref: '#/definitions/post.GetPostByIdResponse'
        "400":
          description: Bad request - invalid parameters
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get post by ID
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Update a post's title, content, event, and images
      parameters:
      - description: Post ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Post payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/post.UpdatePostReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing post
      tags:
      - posts
  /users/change-password:
    post:
      consumes:
      - application/json
      description: Change password for the authenticated user
      parameters:
      - description: Change password payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.ChangePasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - auth
  /users/forgot-password:
    post:
      consumes:
      - application/json
      description: Send email to reset password
      parameters:
      - description: Email payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.ForgotPasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Send forgot password email
      tags:
      - auth
  /users/login:
    post:
      consumes:
      - application/json
      description: Login and obtain access/refresh tokens
      parameters:
      - description: Login payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.LoginUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Login
      tags:
      - auth
  /users/logout:
    post:
      consumes:
      - application/json
      description: Revoke refresh token and logout
      parameters:
      - description: Logout payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.LogoutUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - auth
  /users/refresh-token:
    post:
      consumes:
      - application/json
      description: Exchange refresh token for new tokens
      parameters:
      - description: Refresh token payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.RefreshTokenReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Refresh token
      tags:
      - auth
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a user account
      parameters:
      - description: Register payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.RegisterUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /users/register/resend-email:
    post:
      consumes:
      - application/json
      description: Resend email verification code for registration
      parameters:
      - description: Email payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.ResendEmailReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Resend verification email for register
      tags:
      - auth
  /users/register/verify:
    post:
      consumes:
      - application/json
      description: Verify user registration using token and return access/refresh
        tokens
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.TokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Verify registration and issue tokens
      tags:
      - auth
produces:
- application/json
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: 'Provide a Bearer token: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
